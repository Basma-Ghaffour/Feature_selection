parameters() %>%
grid_regular(levels=5)
tune_res_svm_rad <- tune_grid(svm_rad_wf,
resamples = data_cv,
grid = svm_rad_grid,
metrics=metric_set(rmse))
svm_rad_best<-select_best(tune_res_svm_rad)
svm_rad_final_wf<-svm_rad_wf %>%
finalize_workflow(svm_rad_best)
rad_svm_fit<-svm_rad_final_wf %>%
last_fit(split_data)
v44<-rad_svm_fit %>% collect_metrics()
v44<-t(as.matrix(v44[,3]))
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v55<-lm_fit %>% collect_metrics()
v55<-t(as.matrix(v55[,3]))
knn_spec<-nearest_neighbor(neighbors=tune()) %>%
set_mode("regression") %>%
set_engine("kknn")
tune_knn_wf<-workflow() %>%
add_model(knn_spec) %>%
add_recipe(rec)
knn_grid<-grid_regular(neighbors(),levels=3)
tune_res_knn<-tune_grid(tune_knn_wf,resamples=data_cv,
grid=knn_grid,metrics = metric_set(rmse))
knn_best<-select_best(tune_res_knn)
final_tune_wf_knn<-tune_knn_wf %>% finalize_workflow(knn_best)
knn_fit<-final_tune_wf_knn %>% last_fit(split_data)
v66<-knn_fit %>% collect_metrics()
v66<-t(as.matrix(v66[,3]))
mat2<-rbind(v11,v22,v33,v44,v55,v66) %>%
round(3)
mat_fin<-cbind(mat,mat2)
split_data <- initial_split(data[,pred], prop = 0.75, strata = FNL.1)
data_train <- training(split_data)
data_test <- testing(split_data)
data_cv<-vfold_cv(data_train)
rec<-recipe(FNL.1~.,data=data_train)
nvar_inter<-ncol(data_train)
tree_spec<-decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression")
tune_tree_wf<-workflow() %>%
add_model(tree_spec %>%
set_args(cost_complexity=tune())) %>%
add_recipe(rec)
cost_complexity_grid <- grid_regular(cost_complexity(range=c(-5,5)),levels=100)
tree_tune_res<- tune_grid(tune_tree_wf,
resamples=data_cv,
grid=cost_complexity_grid,
metrics=metric_set(rmse))
best_cost_complexity <- select_best(tree_tune_res)
final_tune_tree_wf <- tune_tree_wf %>%
finalize_workflow(best_cost_complexity)
tree_fit <- final_tune_tree_wf %>% last_fit(split_data)
v111<-tree_fit %>% collect_metrics()
v111<-t(as.matrix(v111[,3]))
random_forest_spec <- rand_forest(mtry = tune()) %>%
set_engine("randomForest", importance = TRUE) %>%
set_mode("regression")
tune_rf_wf <- workflow() %>%
add_model(random_forest_spec) %>%
add_recipe(rec)
mtry_grid <- data.frame(mtry = nvar_inter-1)
rf_tune_res<-tune_grid(
tune_rf_wf,
resamples=data_cv,
grid=mtry_grid,
metrics=metric_set(rmse)
)
best_mtry<-select_best(rf_tune_res)
final_tune_rf_wf<-tune_rf_wf %>%
finalize_workflow(best_mtry)
rf_fit<-final_tune_rf_wf %>% last_fit(split_data)
v222<-rf_fit %>% collect_metrics()
v222<-t(as.matrix(v222[,3]))
svm_linear_spec <- svm_poly(degree = 1,cost=tune()) %>%
set_mode("regression") %>%
set_engine("kernlab")
tune_svml_wf<-workflow() %>%
add_model(svm_linear_spec) %>%
add_recipe(rec)
svm_grid<-grid_regular(cost(),levels=5)
svml_tune_res<-tune_grid(tune_svml_wf,
resamples=data_cv,
grid=svm_grid,
metrics=metric_set(rmse))
best_cost<-select_best(svml_tune_res)
final_tune_svml_wf<-tune_svml_wf %>%
finalize_workflow(best_cost)
svml_fit<-final_tune_svml_wf %>%
last_fit(split_data)
v333<-svml_fit %>% collect_metrics()
v333<-t(as.matrix(v333[,3]))
svm_rad_spec<- svm_rbf(cost=tune(),rbf_sigma=tune()) %>%
set_mode("regression") %>%
set_engine("kernlab")
svm_rad_wf<-
workflow() %>%
add_model(svm_rad_spec %>%  set_args(cost=tune(),rbf_sigma=tune())) %>%
add_recipe(rec)
svm_rad_grid <- svm_rad_wf %>%
parameters() %>%
grid_regular(levels=5)
tune_res_svm_rad <- tune_grid(svm_rad_wf,
resamples = data_cv,
grid = svm_rad_grid,
metrics=metric_set(rmse))
svm_rad_best<-select_best(tune_res_svm_rad)
svm_rad_final_wf<-svm_rad_wf %>%
finalize_workflow(svm_rad_best)
rad_svm_fit<-svm_rad_final_wf %>%
last_fit(split_data)
v444<-rad_svm_fit %>% collect_metrics()
v444<-t(as.matrix(v444[,3]))
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v555<-lm_fit %>% collect_metrics()
v555<-t(as.matrix(v555[,3]))
knn_spec<-nearest_neighbor(neighbors=tune()) %>%
set_mode("regression") %>%
set_engine("kknn")
tune_knn_wf<-workflow() %>%
add_model(knn_spec) %>%
add_recipe(rec)
knn_grid<-grid_regular(neighbors(),levels=3)
tune_res_knn<-tune_grid(tune_knn_wf,resamples=data_cv,
grid=knn_grid,metrics = metric_set(rmse))
knn_best<-select_best(tune_res_knn)
final_tune_wf_knn<-tune_knn_wf %>% finalize_workflow(knn_best)
knn_fit<-final_tune_wf_knn %>% last_fit(split_data)
v666<-knn_fit %>% collect_metrics()
v666<-t(as.matrix(v666[,3]))
mat3<-rbind(v111,v222,v333,v444,v555,v666) %>%
round(3)
tab1<-cbind(mat,mat2)
colnames(tab1)=c("RMSE","R2","RMSE","R2")
tab2<-cbind(mat,mat3)
colnames(tab2)<-c("RMSE","R2","RMSE","R2")
mat_final<-cbind(mat,mat2,mat3)
colnames(mat_final)<-c("RMSE","R2","RMSE","R2","RMSE","R2")
setwd("C:/Users/basma/Desktop/Memoire/Application/Ap_deuxieme_base")
knitr::opts_chunk$set(echo = TRUE)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
View(data)
data$Appliances<-as.factor(data$Appliances)
data$lights<-as.factor(data$lights)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data<-read.csv("FrenchOpen-men-2013.csv",header=TRUE,sep=",")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
set.seed(1)
data<-data[sample(nrow(data), 1000),]
data<-data[,-1]
split_data <- initial_split(data, prop = 0.75, strata = Appliance)
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_test <- testing(split_data)
rec<-recipe(Applicances~.,data=data_train)
rec<-recipe(Appliances~.,data=data_train)
data_cv<-vfold_cv(data_train)
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[sample(nrow(data), 1000),]
data<-data[,-1]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_test <- testing(split_data)
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[sample(nrow(data), 1000),]
data<-data[,-1]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_test <- testing(split_data)
rec<-recipe(Appliances~.,data=data_train)
data_cv<-vfold_cv(data_train)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(VSURF)
library(tidymodels)
library(kknn)
library(stargazer)
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[sample(nrow(data), 1000),]
data<-data[,-1]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_test <- testing(split_data)
rec<-recipe(Appliances~.,data=data_train)
data_cv<-vfold_cv(data_train)
tree_spec<-decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression")
tune_tree_wf<-workflow() %>%
add_model(tree_spec %>%
set_args(cost_complexity=tune())) %>%
add_recipe(rec)
cost_complexity_grid <- grid_regular(cost_complexity(range=c(-5,5)),levels=50)
tree_tune_res<- tune_grid(tune_tree_wf,
resamples=data_cv,
grid=cost_complexity_grid,
metrics=metric_set(rmse))
best_cost_complexity <- select_best(tree_tune_res)
final_tune_tree_wf <- tune_tree_wf %>%
finalize_workflow(best_cost_complexity)
tree_fit <- final_tune_tree_wf %>% last_fit(split_data)
v1<-tree_fit %>% collect_metrics()
v1<-t(as.matrix(v1[,3]))
random_forest_spec <- rand_forest(mtry = tune()) %>%
set_engine("randomForest", importance = TRUE) %>%
set_mode("regression")
tune_rf_wf <- workflow() %>%
add_model(random_forest_spec) %>%
add_recipe(rec)
mtry_grid <- data.frame(mtry = 1:27)
rf_tune_res<-tune_grid(
tune_rf_wf,
resamples=data_cv,
grid=mtry_grid,
metrics=metric_set(rmse)
)
set.seed(1)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[,-1]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_train<-data_train[sample(nrow(data_train), 1000),]
data_test <- testing(split_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(VSURF)
library(tidymodels)
library(kknn)
library(stargazer)
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[,-1]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_train<-data_train[sample(nrow(data_train), 1000),]
data_test <- testing(split_data)
rec<-recipe(Appliances~.,data=data_train)
data_cv<-vfold_cv(data_train)
tree_spec<-decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression")
tune_tree_wf<-workflow() %>%
add_model(tree_spec %>%
set_args(cost_complexity=tune())) %>%
add_recipe(rec)
cost_complexity_grid <- grid_regular(cost_complexity(range=c(-5,5)),levels=50)
tree_tune_res<- tune_grid(tune_tree_wf,
resamples=data_cv,
grid=cost_complexity_grid,
metrics=metric_set(rmse))
best_cost_complexity <- select_best(tree_tune_res)
final_tune_tree_wf <- tune_tree_wf %>%
finalize_workflow(best_cost_complexity)
tree_fit <- final_tune_tree_wf %>% last_fit(split_data)
v1<-tree_fit %>% collect_metrics()
v1<-t(as.matrix(v1[,3]))
random_forest_spec <- rand_forest(mtry = tune()) %>%
set_engine("randomForest", importance = TRUE) %>%
set_mode("regression")
tune_rf_wf <- workflow() %>%
add_model(random_forest_spec) %>%
add_recipe(rec)
mtry_grid <- data.frame(mtry = 1:27)
rf_tune_res<-tune_grid(
tune_rf_wf,
resamples=data_cv,
grid=mtry_grid,
metrics=metric_set(rmse)
)
cost_complexity_grid
autoplot(best_cost_complexity)
library(ggplot2)
autoplot(best_cost_complexity)
autoplot(final_tune_tree_wf)
autoplot(tree_tune_res)
tree_spec<-decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression")
tune_tree_wf<-workflow() %>%
add_model(tree_spec %>%
set_args(cost_complexity=tune())) %>%
add_recipe(rec)
cost_complexity_grid <- grid_regular(cost_complexity(range=c(-5,100)),levels=5)
tree_tune_res<- tune_grid(tune_tree_wf,
resamples=data_cv,
grid=cost_complexity_grid,
metrics=metric_set(rmse))
best_cost_complexity <- select_best(tree_tune_res)
final_tune_tree_wf <- tune_tree_wf %>%
finalize_workflow(best_cost_complexity)
tree_fit <- final_tune_tree_wf %>% last_fit(split_data)
library(ggplot2)
autoplot(tree_tune_res)
v1<-tree_fit %>% collect_metrics()
v1<-t(as.matrix(v1[,3]))
View(v1)
v1<-tree_fit %>% collect_metrics()
View(v1)
v1<-t(as.matrix(v1[,3]))
tree_spec<-decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression")
tune_tree_wf<-workflow() %>%
add_model(tree_spec %>%
set_args(cost_complexity=tune())) %>%
add_recipe(rec)
cost_complexity_grid <- grid_regular(cost_complexity(range=c(0,100)),levels=5)
tree_tune_res<- tune_grid(tune_tree_wf,
resamples=data_cv,
grid=cost_complexity_grid,
metrics=metric_set(rmse))
best_cost_complexity <- select_best(tree_tune_res)
final_tune_tree_wf <- tune_tree_wf %>%
finalize_workflow(best_cost_complexity)
tree_fit <- final_tune_tree_wf %>% last_fit(split_data)
library(ggplot2)
autoplot(tree_tune_res)
v1<-tree_fit %>% collect_metrics()
v1<-t(as.matrix(v1[,3]))
random_forest_spec <- rand_forest(mtry = tune()) %>%
set_engine("randomForest", importance = TRUE) %>%
set_mode("regression")
tune_rf_wf <- workflow() %>%
add_model(random_forest_spec) %>%
add_recipe(rec)
mtry_grid <- data.frame(mtry = 1:27)
rf_tune_res<-tune_grid(
tune_rf_wf,
resamples=data_cv,
grid=mtry_grid,
metrics=metric_set(rmse)
)
random_forest_spec <- rand_forest(mtry = tune()) %>%
set_engine("randomForest", importance = TRUE) %>%
set_mode("regression")
tune_rf_wf <- workflow() %>%
add_model(random_forest_spec) %>%
add_recipe(rec)
mtry_grid <- data.frame(mtry = 1:2)
rf_tune_res<-tune_grid(
tune_rf_wf,
resamples=data_cv,
grid=mtry_grid,
metrics=metric_set(rmse)
)
best_mtry<-select_best(rf_tune_res)
final_tune_rf_wf<-tune_rf_wf %>%
finalize_workflow(best_mtry)
rf_fit<-final_tune_rf_wf %>% last_fit(split_data)
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v5<-lm_fit %>% collect_metrics()
v5<-t(as.matrix(v5[,3]))
View(v5)
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v5<-t(as.matrix(v5[,3]))
v5<-lm_fit %>% collect_metrics()
v5<-t(as.matrix(v5[,3]))
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[,-c(1,28:29]
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[,-c(1,28:29)]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_train<-data_train[sample(nrow(data_train), 1000),]
data_test <- testing(split_data)
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v55<-lm_fit %>% collect_metrics()
v55<-t(as.matrix(v55[,3]))
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v5<-lm_fit %>% collect_metrics()
v5<-t(as.matrix(v5[,3]))
v5
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
rec<-recipe(Appliances~.,data=data_train)
data_cv<-vfold_cv(data_train)
lm_spec<-linear_reg() %>% set_engine("lm") %>%
set_mode("regression")
lm_wf<-workflow() %>%
add_model(lm_spec) %>%
add_recipe(rec)
lm_fit<-lm_wf %>%
last_fit(split_data)
v5<-lm_fit %>% collect_metrics()
v5<-t(as.matrix(v5[,3]))
View(v5)
library(corrplot)
Cor<-round(cor(data,3))
View(data)
library(corrplot)
Cor<-round(cor(data),3)
corrplot(Cor, type="upper",diag=FALSE,method="square",tl.col="black",tl.cex=0.7,number.cex=0.7)
set.seed(1)
data<-read.csv("energydata_complete.csv",header=TRUE,sep=",",dec=".")
data <- data.frame(lapply(data, function(x) replace(x, x == "", NA)))
colSums(is.na(data))
Filtre <- which(rowSums(is.na(data))==0)
data <- data[Filtre,]
data<-data[,-c(1,28:29)]
split_data <- initial_split(data, prop = 0.75, strata = Appliances)
data_train <- training(split_data)
data_train<-data_train[sample(nrow(data_train), 60),]
data_test <- testing(split_data)
svm_rad_spec<- svm_rbf(cost=tune(),rbf_sigma=tune()) %>%
set_mode("regression") %>%
set_engine("kernlab")
svm_rad_wf<-
workflow() %>%
add_model(svm_rad_spec %>%  set_args(cost=tune(),rbf_sigma=tune())) %>%
add_recipe(rec)
svm_rad_grid <- svm_rad_wf %>%
parameters() %>%
grid_regular(levels=3)
tune_res_svm_rad <- tune_grid(svm_rad_wf,
resamples = data_cv,
grid = svm_rad_grid,
metrics=metric_set(rmse))
svm_rad_best<-select_best(tune_res_svm_rad)
svm_rad_final_wf<-svm_rad_wf %>%
finalize_workflow(svm_rad_best)
rad_svm_fit<-svm_rad_final_wf %>%
last_fit(split_data)
